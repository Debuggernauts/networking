use std::collections::HashMap;
use reed_solomon::{
    Encoder,
    Decoder
};
use crate::{
    nibble,
    fatal,
    controls,
    consts::*,
    utilities::nibbles_to_bytes
};

#[derive(Debug, Clone)]
pub struct TransmissionHeader {
    total_packets: u16,
}

#[derive(Debug, Clone)]
pub struct Transmission {
    header: TransmissionHeader,
    packets: Vec<Packet>,
}

#[derive(Debug, Clone)]
pub struct PacketHeader {
    size: u16,
    id: u16,
    ecc_size: u8,
}

#[derive(Debug, Clone)]
pub struct Packet {
    header: PacketHeader,
    data: Vec<u8>,
    ecc: Vec<u8>,
}

impl PacketHeader {
    pub fn new(size: u16, id: u16, ecc_size: u8) -> Self {
        Self { size, id, ecc_size }
    }

    #[allow(clippy::cast_possible_truncation)]
    pub fn to_binary(&self) -> Vec<(u8, bool)> {
        vec![
            (controls::SOH, true),
            (((self.size >> 8) as u8), false),
            ((self.size as u8), false),
            (((self.id >> 8) as u8), false),
            ((self.id as u8), false),
            (self.ecc_size, false),
            (controls::SOTX, true),
        ]
    }
}

impl Packet {
    pub fn new(packet_data: Vec<u8>, id: u16) -> Self {
        let data_size = PACKET_HEADER_SIZE + packet_data.len();
        let ecc_size = (data_size as f32 * 0.5) as usize;
        let encoded = Encoder::new(ecc_size.clone()).encode(&packet_data[..]);
        Self {
            header: PacketHeader::new(data_size as u16, id, ecc_size as u8),
            data: encoded.data().to_vec(),
            ecc: encoded.ecc().to_vec(),
        }
    }

    pub fn from_binary(data: String) -> Self {
        todo!()
    }

    pub fn to_binary(&self) -> Vec<(u8, bool)> {
        let mut binary: Vec<(u8, bool)> = Vec::new();
        binary.append(&mut self.header.to_binary());
        binary.append(&mut self.data.iter().map(|byte| (*byte, false)).collect());
        binary.append(&mut self.ecc.iter().map(|byte| (*byte, false)).collect()); // TODO CANT EXTEND
        binary.push((controls::EOTX, true));
        binary
    }

    pub fn set_size(&mut self, new_size: u16) {
        self.header.size = new_size;
    }
}

impl TransmissionHeader {
    pub fn new(size: usize) -> Self {
        Self {
            total_packets: size as u16
        }
    }

    #[allow(clippy::cast_possible_truncation)]
    fn to_binary(&self) -> Vec<(u8, bool)> {
        vec![
            (controls::SOT, true),
            (controls::SOH, true),
            (((self.total_packets >> 8) as u8), false),
            ((self.total_packets as u8), false),
        ]
    }
}

impl Transmission {
    pub fn new(data: Vec<Packet>) -> Self {
        Self {
            header: TransmissionHeader::new(data.len()),
            packets: data
        }
    }

    pub fn from_bytes(data: Vec<u8>, byte_map: HashMap<u8, &str>) {
        let decoder = ProtocolDecoder::new(data, byte_map);


    }

    fn set_packets(&mut self, packets: Vec<Packet>) {
        self.packets = packets;
    }

    /// C = clock, I = is_control, D = data
    /// CDDD
    /// CDDD
    /// CDDI
    pub fn to_binary(&self) -> Vec<u8> {
        let mut binary: Vec<(u8, bool)> = Vec::new();
        binary.extend(self.header.to_binary());
        let temp_packs = self.packets.clone();
        for mut packet in temp_packs {
            packet.set_size(((packet.header.size as f64) * 1.5) as u16);
        }
        binary.extend(
            self.packets
                .iter()
                .map(|packet| packet.to_binary())
                .flatten()
                .collect::<Vec<(u8, bool)>>(),
        );
        binary.push((controls::EOT, true));

        let mut clock: u8 = 0b0;
        let mut buffer: Vec<u8> = Vec::new();

        for mapped_byte in binary {
            let byte = mapped_byte.0;
            let is_control = mapped_byte.1;
            let one: u8 = (clock << 3) | (nibble!(byte >> 4).0 >> 1);
            clock ^= 1;
            let two: u8 = (clock << 3) | (nibble!(byte >> 2).1 & 0b0111);
            clock ^= 1;
            let three: u8 = (clock << 3) | (nibble!(byte << 1).1 & 0b110) | u8::from(is_control);
            clock ^= 1;
            buffer.push(one);
            buffer.push(two);
            buffer.push(three);
        }

        let mut result = Vec::new();
        for chunk in buffer.chunks(2) {
            if chunk.len() == 2 {
                // Schiebe das erste Nibble um 4 Bits nach links
                // und kombiniere es mit dem zweiten Nibble
                let combined = (chunk[0] << 4) | chunk[1];
                result.push(combined);
            } else {
                // Das letzte Nibble einfach nach links schieben
                let combined = chunk[0] << 4;
                result.push(combined);
            }
        }

        result
    }
}

pub struct ProtocolDecoder {
    bytes: Vec<u8>,
    flags: Vec<bool>,
    index: usize,
    transmission: Option<Transmission>,
}

impl ProtocolDecoder {
    pub fn new(data: Vec<u8>, byte_map: HashMap<u8, &str>) -> Self {
        let mut triplets = Vec::new();

        for chunk in data.chunks(3) {
            let mut arr = [0u8; 3];
            for (i, &item) in chunk.iter().enumerate() {
                arr[i] = item;
            }
            triplets.push(arr);
        }

        let mut tuple_vec = Vec::new();
        for triplet in triplets {
            let bytes = nibbles_to_bytes(triplet);
            tuple_vec.push(bytes[0]);
            tuple_vec.push(bytes[1]);
        }

        let mut bytes = Vec::new();
        let mut flags = Vec::new();

        for tuple in tuple_vec {
            bytes.push(tuple.0);
            flags.push(tuple.1);
        }

        Self {
            bytes,
            flags,
            index: 0,
            transmission: None
        }
    }

    pub fn decode(&mut self) {
        let transmission_header: TransmissionHeader;
        let packets: Vec<Packet> = Vec::new();

        match self.flags[self.index] {
            true => match self.bytes[self.index] {
                controls::SOT => {
                    todo!() 
                },
                controls::EOT => {
                    return;
                },
                controls::SOH => {
                    todo!()
                },
                controls::SOTX => {
                    todo!()
                },
                controls::EOTX => {
                    todo!()
                },
                controls::ENQ => {
                    todo!()
                },
                controls::ACK => {
                    todo!()
                },
                controls::NAC => {
                    todo!()
                },
                _ => {
                    fatal!("Challenge Complete! How Did We Get Here?");
                }
            },
            false => {}
        }
    }

    fn start_of_transmission(&mut self) -> bool {
        if self.peek().unwrap() == (1, true) {
            self.index += 1;
            return true;
        }
        false
    }

    fn peek(&self) -> Option<(u8, bool)> {
        match self.index {
            _ if self.index + 1 < self.bytes.len() => {
                return Some((self.bytes[self.index+1], self.flags[self.index+1]));
            }
            _ if self.index + 1 >= self.bytes.len() => {
                return None
            }
            _ => {
                fatal!(":() {{ : | : & }} :");
            }
        }
    }
}
